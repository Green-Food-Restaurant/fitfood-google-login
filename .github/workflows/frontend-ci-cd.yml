name: "GreenFood Frontend CI/CD Pipeline"

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: greenfood-web-frontend
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  CONTAINER_PORT: 3000
  SUCCESS_COLOR: 3066993
  ERROR_COLOR: 15158332
  WARNING_COLOR: 16027660
  INFO_COLOR: 3447003
  PROJECT_NAME: GreenFood Web Frontend

jobs:
  ##############################################
  # EST√ÅGIO 1: VALIDA√á√ÉO E COMPILA√á√ÉO
  ##############################################
  validate-and-build:
    name: "üîç Valida√ß√£o e Compila√ß√£o"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4.2.2
      
      - name: Configura√ß√£o do Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Instala√ß√£o de depend√™ncias
        id: install
        run: npm ci --legacy-peer-deps
      
      - name: Notifica√ß√£o - Instala√ß√£o de depend√™ncias
        if: always()
        run: |
          STATUS="${{ steps.install.outcome }}"
          if [ "$STATUS" == "success" ]; then
            echo "‚úÖ Depend√™ncias instaladas com sucesso"
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ùå Falha na instala√ß√£o de depend√™ncias",
                "description": "Ocorreu um erro ao instalar as depend√™ncias do projeto",
                "color": ${{ env.ERROR_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true},
                  {"name": "Etapa", "value": "Instala√ß√£o", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi
      
      # - name: Verifica√ß√£o de vari√°veis de ambiente
      #   id: env_check
      #   run: |
      #     # Verifica se o arquivo env.example existe
      #     if [ -f "env.example" ]; then
      #       echo "‚úÖ Arquivo env.example encontrado"
            
      #       # Extrai as vari√°veis necess√°rias do env.example
      #       ENV_VARS=$(grep -v "^#" env.example | grep "=" | cut -d "=" -f1)
      #       MISSING_VARS=()
            
      #       # Verifica se as vari√°veis est√£o definidas no Dockerfile
      #       for VAR in $ENV_VARS; do
      #         if ! grep -q "$VAR" Dockerfile; then
      #           MISSING_VARS+=("$VAR")
      #         fi
      #       done
            
      #       if [ ${#MISSING_VARS[@]} -eq 0 ]; then
      #         echo "‚úÖ Todas as vari√°veis de ambiente necess√°rias est√£o definidas no Dockerfile"
      #         echo "env_check_status=success" >> $GITHUB_OUTPUT
      #       else
      #         echo "‚ö†Ô∏è As seguintes vari√°veis de ambiente est√£o faltando no Dockerfile:"
      #         printf "  - %s\n" "${MISSING_VARS[@]}"
      #         echo "env_check_status=warning" >> $GITHUB_OUTPUT
      #       fi
      #     else
      #       echo "‚ö†Ô∏è Arquivo env.example n√£o encontrado"
      #       echo "env_check_status=warning" >> $GITHUB_OUTPUT
      #     fi
      
      # - name: Notifica√ß√£o - Verifica√ß√£o de vari√°veis de ambiente
      #   if: always()
      #   run: |
      #     STATUS="${{ steps.env_check.outputs.env_check_status }}"
      #     if [ "$STATUS" == "success" ]; then
      #       curl -H "Content-Type: application/json" -X POST -d '{
      #         "embeds": [{
      #           "title": "‚úÖ Vari√°veis de ambiente verificadas",
      #           "description": "Todas as vari√°veis de ambiente necess√°rias est√£o configuradas",
      #           "color": ${{ env.SUCCESS_COLOR }},
      #           "fields": [
      #             {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
      #             {"name": "Etapa", "value": "Verifica√ß√£o de Ambiente", "inline": true}
      #           ],
      #           "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
      #         }]
      #       }' "$DISCORD_WEBHOOK"
      #     else
      #       curl -H "Content-Type: application/json" -X POST -d '{
      #         "embeds": [{
      #           "title": "‚ö†Ô∏è Aten√ß√£o nas vari√°veis de ambiente",
      #           "description": "Algumas vari√°veis de ambiente podem estar faltando ou incorretas",
      #           "color": ${{ env.WARNING_COLOR }},
      #           "fields": [
      #             {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
      #             {"name": "Etapa", "value": "Verifica√ß√£o de Ambiente", "inline": true}
      #           ],
      #           "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
      #         }]
      #       }' "$DISCORD_WEBHOOK"
      #     fi
      
      - name: An√°lise de c√≥digo (Lint)
        id: lint
        continue-on-error: true
        run: npm run lint
      
      - name: Notifica√ß√£o - An√°lise de c√≥digo
        if: always()
        run: |
          STATUS="${{ steps.lint.outcome }}"
          if [ "$STATUS" == "success" ]; then
            echo "‚úÖ An√°lise de c√≥digo conclu√≠da com sucesso"
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ö†Ô∏è Problemas na an√°lise de c√≥digo",
                "description": "Foram encontrados problemas na an√°lise de c√≥digo, mas o pipeline continuar√°",
                "color": ${{ env.WARNING_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true},
                  {"name": "Etapa", "value": "Lint", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi
      
      - name: Compila√ß√£o do projeto
        id: build
        run: npm run build
      
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1
      
      - name: Notifica√ß√£o - Compila√ß√£o
        if: always()
        run: |
          STATUS="${{ steps.build.outcome }}"
          if [ "$STATUS" == "success" ]; then
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚úÖ Compila√ß√£o conclu√≠da com sucesso",
                "description": "O c√≥digo foi compilado com sucesso e os artefatos foram salvos",
                "color": ${{ env.SUCCESS_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true},
                  {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ùå Falha na compila√ß√£o",
                "description": "Ocorreu um erro durante a compila√ß√£o do c√≥digo",
                "color": ${{ env.ERROR_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true},
                  {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi

  ##############################################
  # EST√ÅGIO 2: CONSTRU√á√ÉO E PUBLICA√á√ÉO DA IMAGEM DOCKER
  ##############################################
  build-and-publish-image:
    name: "üê≥ Constru√ß√£o e Publica√ß√£o da Imagem"
    needs: validate-and-build
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get_tag.outputs.image_tag }}
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4.2.2
      
      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/
      
      - name: Verifica√ß√£o do Dockerfile
        id: dockerfile_check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "‚úÖ Dockerfile encontrado"
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Dockerfile n√£o encontrado"
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Extra√ß√£o de metadados para Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short
      
      - name: Login no Docker Hub
        id: login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Notifica√ß√£o - Login no Docker Hub
        if: always()
        run: |
          STATUS="${{ steps.login.outcome }}"
          if [ "$STATUS" == "success" ]; then
            echo "‚úÖ Login no Docker Hub realizado com sucesso"
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ùå Falha no login no Docker Hub",
                "description": "N√£o foi poss√≠vel autenticar no Docker Hub",
                "color": ${{ env.ERROR_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Etapa", "value": "Docker Login", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi
      
      - name: Configura√ß√£o do Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Constru√ß√£o e publica√ß√£o da imagem Docker
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Obten√ß√£o da tag principal
        id: get_tag
        run: |
          TAGS='${{ steps.meta.outputs.tags }}'
          MAIN_IMAGE=$(echo "$TAGS" | head -n1)
          MAIN_TAG=$(echo "$MAIN_IMAGE" | awk -F: '{print $NF}')
          if [ "$MAIN_TAG" = "main" ]; then
            MAIN_TAG="latest"
          fi
          echo "image_tag=$MAIN_TAG" >> $GITHUB_OUTPUT
      
      - name: An√°lise de vulnerabilidades com Trivy
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_tag.outputs.image_tag }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      - name: Notifica√ß√£o - An√°lise de vulnerabilidades
        if: always()
        run: |
          STATUS="${{ steps.trivy.outcome }}"
          if [ "$STATUS" == "success" ]; then
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚úÖ An√°lise de vulnerabilidades conclu√≠da",
                "description": "A an√°lise de seguran√ßa da imagem foi conclu√≠da",
                "color": ${{ env.SUCCESS_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Etapa", "value": "Trivy Scan", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ö†Ô∏è Problemas na an√°lise de vulnerabilidades",
                "description": "Foram encontradas vulnerabilidades na imagem Docker",
                "color": ${{ env.WARNING_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Etapa", "value": "Trivy Scan", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi
      
      - name: Notifica√ß√£o - Publica√ß√£o da imagem Docker
        if: always()
        run: |
          STATUS="${{ steps.docker_build.outcome }}"
          if [ "$STATUS" == "success" ]; then
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚úÖ Imagem Docker publicada",
                "description": "A imagem Docker foi constru√≠da e publicada com sucesso",
                "color": ${{ env.SUCCESS_COLOR }},
                "fields": [
                  {"name": "Imagem", "value": "${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_tag.outputs.image_tag }}", "inline": false},
                  {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true},
                  {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ùå Falha na publica√ß√£o da imagem Docker",
                "description": "Ocorreu um erro durante a constru√ß√£o ou publica√ß√£o da imagem Docker",
                "color": ${{ env.ERROR_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true},
                  {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi

  ##############################################
  # EST√ÅGIO 3: DEPLOY NO AMBIENTE COOLIFY
  ##############################################
  deploy-to-production:
    name: "üöÄ Deploy em Produ√ß√£o"
    needs: build-and-publish-image
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Verificar configura√ß√µes do Coolify
        id: coolify_check
        run: |
          if [ -n "${{ secrets.COOLIFY_WEBHOOK }}" ] && [ -n "${{ secrets.COOLIFY_FRONTEND_UUID }}" ] && [ -n "${{ secrets.COOLIFY_TOKEN }}" ]; then
            echo "‚úÖ Configura√ß√µes do Coolify verificadas"
            echo "coolify_config_ok=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Configura√ß√µes do Coolify incompletas"
            echo "coolify_config_ok=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Iniciar deploy no Coolify
        id: deploy
        run: |
          echo "Iniciando deploy para Coolify..."
          RESPONSE=$(curl -s -X POST "${{ secrets.COOLIFY_WEBHOOK }}/api/v1/deploy?uuid=${{ secrets.COOLIFY_FRONTEND_UUID }}&force=false" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
          -d '{
            "ref": "${{ github.ref }}",
            "environment": {
              "PORT": "${{ env.CONTAINER_PORT }}"
            }
          }')
          
          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.deployments[0].resource_uuid // ""')
          if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "null" ]; then
            echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "üîÑ Deploy iniciado no Coolify",
                "description": "O processo de deploy foi iniciado com sucesso no ambiente Coolify",
                "color": ${{ env.INFO_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Ambiente", "value": "Produ√ß√£o (Coolify)", "inline": true},
                  {"name": "Deployment ID", "value": "'"$DEPLOYMENT_ID"'", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          else
            echo "Aviso: N√£o foi poss√≠vel extrair o ID do deployment"
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ö†Ô∏è Problema ao iniciar deploy",
                "description": "O processo de deploy foi iniciado, mas n√£o foi poss√≠vel obter o ID do deployment",
                "color": ${{ env.WARNING_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Ambiente", "value": "Produ√ß√£o (Coolify)", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi
      
      - name: Verificar status do deployment
        id: check_status
        run: |
          echo "Aguardando 30 segundos para o in√≠cio do deployment..."
          sleep 30
          DEPLOYMENT_ID="${{ steps.deploy.outputs.deployment_id }}"
          DEPLOYMENT_STATUS="unknown"
          
          if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "null" ]; then
            echo "Verificando status do deployment $DEPLOYMENT_ID"
            DEPLOY_RESPONSE=$(curl -s -X GET "${{ secrets.COOLIFY_WEBHOOK }}/api/v1/deployments/$DEPLOYMENT_ID/status" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}")
            STATUS=$(echo "$DEPLOY_RESPONSE" | jq -r '.status // .state // "unknown"')
            DEPLOYMENT_STATUS=$STATUS
          else
            echo "Verificando status geral do recurso..."
            RESOURCE_RESPONSE=$(curl -s -X GET "${{ secrets.COOLIFY_WEBHOOK }}/api/v1/resources/${{ secrets.COOLIFY_FRONTEND_UUID }}/status" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}")
            HEALTH_STATUS=$(echo "$RESOURCE_RESPONSE" | jq -r '.status // .state // .health // "unknown"')
            DEPLOYMENT_STATUS=$HEALTH_STATUS
          fi
          
          if [[ "$DEPLOYMENT_STATUS" = "success" || "$DEPLOYMENT_STATUS" = "running" || "$DEPLOYMENT_STATUS" = "completed" || "$DEPLOYMENT_STATUS" = "healthy" ]]; then
            echo "deployment_successful=true" >> $GITHUB_OUTPUT
          else
            echo "deployment_successful=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Notifica√ß√£o - Status do deployment
        if: always()
        run: |
          DEPLOYMENT_SUCCESS="${{ steps.check_status.outputs.deployment_successful }}"
          
          if [ "$DEPLOYMENT_SUCCESS" == "true" ]; then
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚úÖ Deploy conclu√≠do com sucesso",
                "description": "A aplica√ß√£o foi implantada com sucesso no ambiente de produ√ß√£o",
                "color": ${{ env.SUCCESS_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Ambiente", "value": "Produ√ß√£o (Coolify)", "inline": true},
                  {"name": "Porta", "value": "${{ env.CONTAINER_PORT }}", "inline": true},
                  {"name": "Imagem", "value": "${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-publish-image.outputs.image_tag }}", "inline": false}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          else
            curl -H "Content-Type: application/json" -X POST -d '{
              "embeds": [{
                "title": "‚ùå Falha no deploy",
                "description": "Ocorreu um erro durante o deploy da aplica√ß√£o no ambiente de produ√ß√£o",
                "color": ${{ env.ERROR_COLOR }},
                "fields": [
                  {"name": "Projeto", "value": "${{ env.PROJECT_NAME }}", "inline": true},
                  {"name": "Ambiente", "value": "Produ√ß√£o (Coolify)", "inline": true},
                  {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true}
                ],
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }]
            }' "$DISCORD_WEBHOOK"
          fi

  ##############################################
  # EST√ÅGIO 4: RESUMO DO PIPELINE
  ##############################################
  pipeline-summary:
    name: "üìä Resumo do Pipeline"
    needs: [validate-and-build, build-and-publish-image, deploy-to-production]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notifica√ß√£o - Resumo do pipeline
        run: |
          BUILD_STATUS="${{ needs.validate-and-build.result }}"
          DOCKER_STATUS="${{ needs.build-and-publish-image.result }}"
          DEPLOY_STATUS="${{ needs.deploy-to-production.result || 'skipped' }}"
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          if [[ "$BUILD_STATUS" == "success" && "$DOCKER_STATUS" == "success" && ("$DEPLOY_STATUS" == "success" || "$DEPLOY_STATUS" == "skipped") ]]; then
            STATUS_COLOR="${{ env.SUCCESS_COLOR }}"
            STATUS_ICON="üéâ"
            STATUS_TITLE="Pipeline Conclu√≠do com Sucesso"
          else
            STATUS_COLOR="${{ env.ERROR_COLOR }}"
            STATUS_ICON="‚ö†Ô∏è"
            STATUS_TITLE="Pipeline Conclu√≠do com Problemas"
          fi
          
          # Formata√ß√£o da dura√ß√£o do pipeline
          START_TIME=$(date -d "${{ github.event.repository.updated_at }}" +%s)
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          MINUTES=$((DURATION / 60))
          SECONDS=$((DURATION % 60))
          
          curl -H "Content-Type: application/json" -X POST -d '{
            "embeds": [{
              "title": "'"$STATUS_ICON"' '"$STATUS_TITLE"'",
              "description": "Resumo completo do pipeline de CI/CD do ${{ env.PROJECT_NAME }}",
              "color": '"$STATUS_COLOR"',
              "fields": [
                {"name": "üîç Valida√ß√£o e Build", "value": "'"$([[ "$BUILD_STATUS" == "success" ]] && echo "‚úÖ Sucesso" || echo "‚ùå Falha")"'", "inline": true},
                {"name": "üê≥ Imagem Docker", "value": "'"$([[ "$DOCKER_STATUS" == "success" ]] && echo "‚úÖ Sucesso" || echo "‚ùå Falha")"'", "inline": true},
                {"name": "üöÄ Deploy", "value": "'"$([[ "$DEPLOY_STATUS" == "success" ]] && echo "‚úÖ Sucesso" || ([[ "$DEPLOY_STATUS" == "skipped" ]] && echo "‚è≠Ô∏è Ignorado" || echo "‚ùå Falha"))"'", "inline": true},
                {"name": "Branch", "value": "`${{ github.ref_name }}`", "inline": true},
                {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true},
                {"name": "Autor", "value": "`${{ github.actor }}`", "inline": true},
                {"name": "Dura√ß√£o", "value": "'"$MINUTES"' min '"$SECONDS"' seg", "inline": true},
                {"name": "Detalhes", "value": "[Ver workflow no GitHub]($WORKFLOW_URL)", "inline": true}
              ],
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
            }]
          }' "$DISCORD_WEBHOOK"